{"version":3,"file":"background.js","mappingsvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://crypto-explorer-extension-v2/./src/utils/api.ts","webpack://crypto-explorer-extension-v2/./src/utils/storage.ts","webpack://crypto-explorer-extension-v2/webpack/bootstrap","webpack://crypto-explorer-extension-v2/webpack/runtime/define property getters","webpack://crypto-explorer-extension-v2/webpack/runtime/hasOwnProperty shorthand","webpack://crypto-explorer-extension-v2/webpack/runtime/make namespace object","webpack://crypto-explorer-extension-v2/./src/background/background.ts"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst COINGECKO_COINS_LIST_API = 'https://api.coingecko.com/api/v3/coins/list';\nconst COINGECKO_NFTS_LIST_API = 'https://api.coingecko.com/api/v3/nfts/list';\nexport function fetchCoinsList() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const res = yield fetch(COINGECKO_COINS_LIST_API);\n            if (!res.ok) {\n                throw new Error(`Fetch error, Coingecko Coins List: ${res.status} ${res.statusText}`);\n            }\n            return yield res.json();\n        }\n        catch (error) {\n            console.error('Error fetching Coingecko Coins List:', error);\n            throw error;\n        }\n    });\n}\nexport function fetchNameSearch(searchQuery) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const res = yield fetch(`https://api.coingecko.com/api/v3/search?query=${searchQuery}`);\n            if (!res.ok) {\n                throw new Error(`Fetch error, Coingecko searchQuery ${searchQuery}: ${res.status} ${res.statusText}`);\n            }\n            return yield res.json();\n        }\n        catch (error) {\n            console.error('Error fetching  Coingecko searchQuery ${searchQuery}', error);\n            throw error;\n        }\n    });\n}\nexport function fetchTrendingCoins() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const res = yield fetch('https://api.coingecko.com/api/v3/search/trending');\n            if (!res.ok) {\n                throw new Error(`Fetch error, Hot Coins: ${res.status} ${res.statusText}`);\n            }\n            return yield res.json();\n        }\n        catch (error) {\n            console.error('Error fetching Hot Coins:', error);\n            throw error;\n        }\n    });\n}\nexport function fetchCoinInfo(coinId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        coinId = coinId || 'bitcoin';\n        try {\n            const res = yield fetch(`https://api.coingecko.com/api/v3/coins/${coinId}?localization=false&market_data=true&community_data=true&developer_data=false&sparkline=false`);\n            if (!res.ok) {\n                throw new Error(`Fetch error, coin info data (${coinId}): ${res.status} ${res.statusText}`);\n            }\n            return yield res.json();\n        }\n        catch (error) {\n            console.error(`Error fetching coin info data (${coinId}):`, error);\n            throw error;\n        }\n    });\n}\nexport function fetchNftInfo(coinId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const res = yield fetch(`https://api.coingecko.com/api/v3/nfts/${coinId}`);\n            if (!res.ok) {\n                throw new Error(`Fetch error, NFT info data (${coinId}): ${res.status} ${res.statusText}`);\n            }\n            return yield res.json();\n        }\n        catch (error) {\n            console.error(`Error fetching NFT info data (${coinId}):`, error);\n            throw error;\n        }\n    });\n}\nexport function fetchPriceHistoryData(coinId, quote, chartRange) {\n    return __awaiter(this, void 0, void 0, function* () {\n        coinId = coinId || 'bitcoin';\n        quote = quote || 'usd';\n        try {\n            const res = yield fetch(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=${quote}&days=${chartRange}&interval=daily`);\n            if (!res.ok) {\n                throw new Error(`Fetch error, price history data (${coinId}): ${res.status} ${res.statusText}`);\n            }\n            return yield res.json();\n        }\n        catch (error) {\n            console.error(`Error fetching price history data (${coinId}):`, error);\n            throw error;\n        }\n    });\n}\nexport function fetchTokenTxs(domainName, contractAddress, txAmount) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const res = yield fetch(`https://api.${domainName}/api?module=account&action=tokentx&contractaddress=${contractAddress}&page=1&offset=${txAmount}&startblock=0&endblock=99999999&sort=desc`);\n            if (!res.ok) {\n                throw new Error(`Fetch error, Eth token txs info: ${res.status} ${res.statusText}`);\n            }\n            return yield res.json();\n        }\n        catch (error) {\n            console.error('Error fetching Eth token txs info:', error);\n            throw error;\n        }\n    });\n}\nexport function fetchNftList() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let allNfts = [];\n        for (let page = 1; page < 100; page++) {\n            try {\n                yield new Promise((resolve) => setTimeout(resolve, 500));\n                const res = yield fetch(`${COINGECKO_NFTS_LIST_API}?per_page=250&page=${page}`);\n                if (!res.ok) {\n                    console.log(`Fetch error, API info page ${page}: ${res.status} ${res.statusText}`);\n                    return allNfts;\n                }\n                const data = yield res.json();\n                allNfts.push(...data);\n                if (data.length < 250) {\n                    return allNfts;\n                }\n            }\n            catch (error) {\n                console.error(`Error fetching API info page ${page}:`, error);\n                return allNfts;\n            }\n        }\n        return allNfts;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function setStoredCoinList(coins) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            chrome.storage.local.set({ coins }, resolve);\n        });\n    });\n}\nexport function getStoredCoinList() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            chrome.storage.local.get(['coins'], (res) => {\n                var _a;\n                resolve((_a = res.coins) !== null && _a !== void 0 ? _a : []);\n            });\n        });\n    });\n}\nexport function setStoredCoins(coinIds) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            chrome.storage.local.set({ coinIds }, resolve);\n        });\n    });\n}\nexport function getStoredCoins() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            chrome.storage.local.get(['coinIds'], (res) => {\n                var _a;\n                resolve((_a = res.coinIds) !== null && _a !== void 0 ? _a : []);\n            });\n        });\n    });\n}\n// NFTs\nexport function setStoredNftList(nfts) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            chrome.storage.local.set({ nfts }, resolve);\n        });\n    });\n}\nexport function getStoredNftList() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            chrome.storage.local.get(['nfts'], (res) => {\n                var _a;\n                resolve((_a = res.nfts) !== null && _a !== void 0 ? _a : []);\n            });\n        });\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { fetchCoinsList, fetchNftList } from '../utils/api';\nimport { setStoredCoinList, setStoredCoins, setStoredNftList, } from '../utils/storage';\n// fetchData()\nfunction fetchData() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let coinList = yield fetchCoinsList();\n        let nftList = yield fetchNftList();\n        setStoredCoinList(coinList);\n        setStoredNftList(nftList);\n        setStoredCoins([{ id: 'bitcoin', symbol: 'btc', name: 'bitcoin' }]);\n    });\n}\n"],"names":[],"sourceRoot":""}